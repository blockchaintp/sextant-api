# kubetpl:syntax:go-template
{{if .aws.db.create }}
apiVersion: cloudformation.linki.space/v1alpha1
kind: Stack
metadata:
  name: {{.deployment.name}}-aurora-pg-stack
  namespace: {{.deployment.namespace}}
spec:
  template: |
    Description:
      This template deploys a VPC with a pair of subnets spread
      across two Availability Zones. It deploys an Internet Gateway,
      with a default route on the public subnets. It deploys an RDS
      PostgreSQL master and single read replica databaes.
    Parameters:
      VpcCIDR:
        Description: IP range (CIDR notation) for this VPC
        Type: String
        Default: "10.0.0.0/24"
        AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
      SubnetMasterCIDR:
        Description: IP range (CIDR notation) for the subnet in the RDS Master Availability Zone
        Type: String
        Default: "10.0.0.0/28"
        AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
      SubnetReplicaCIDR:
        Description: IP range (CIDR notation) for the subnet in the RDS Read Replica Availability Zone
        Type: String
        Default: "10.0.0.16/28"
        AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
      DBInstanceIdentifier:
        Type: String
        Default: "{{.deployment.name}}-aurora-pg"
      ReplicaInstanceIdentifier:
        Type: String
        Default: "{{.deployment.name}}-aurora-pg-replica"
      DBEngine:
        Type: String
        Default: "aurora-postgresql"
      DBEngineVersion:
        Type: String
        Default: "10.7"
      DBSourceRegion:
        Type: String
        Default: "us-east-1"
      DBInstanceClass:
        Type: String
        Default: "db.r4.large"
      DBName:
        Type: String
        Default: "postgres"
      DBUser:
        Type: String
        Default: "postgres"
      DBPassword:
        Type: String
        Default: "postgres"
        NoEcho: True
    Resources:
      VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsSupport: true
          EnableDnsHostnames: true
          Tags:
            - Key: Name
              Value: Demo VPC
      InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
            - Key: Name
              Value: Internet Gateway
      InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC
      SubnetMasterDB:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref SubnetMasterCIDR
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: Master Subnet (AZ1)
      SubnetReplicaDB:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref SubnetReplicaCIDR
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: Replica Subnet (AZ2)
      PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: Public Route Table
      DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
      SubnetMasterRouteTableAssoc:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref SubnetMasterDB
      SubnetReplicaRouteTableAssoc:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref SubnetReplicaDB
      DBSubnetGroup:
        Properties:
          DBSubnetGroupDescription: DBSubnetGroup for RDS instances
          SubnetIds:
            - Ref: SubnetMasterDB
            - Ref: SubnetReplicaDB
        Type: AWS::RDS::DBSubnetGroup
      VpcDefaultSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId: !GetAtt VPC.DefaultSecurityGroup
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432

      RDSDBClusterParameterGroup:
        Type: AWS::RDS::DBClusterParameterGroup
        Properties:
          Description: !Join [ "- ", [ "Aurora PG Cluster Parameter Group for  Cloudformation Stack ", !Ref DBName ] ]
          Family: "aurora-postgresql10"
          Parameters:
            rds.force_ssl: 1
      DBParamGroup:
        Type: AWS::RDS::DBParameterGroup
        Properties:
          Description: !Join [ "- ", [ "Aurora PG Database Instance Parameter Group for Cloudformation Stack ", !Ref DBName ] ]
          Family: "aurora-postgresql10"
          Parameters:
            shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
            log_statement: "ddl"
            log_connections: 1
            log_disconnections: 1
            log_lock_waits: 1
            log_min_duration_statement: 5000
            auto_explain.log_min_duration: 5000
            auto_explain.log_verbose: 1
            log_rotation_age: 1440
            log_rotation_size: 102400
            rds.log_retention_period: 10080
            random_page_cost: 1
            track_activity_query_size: 16384
            idle_in_transaction_session_timeout: 7200000
            statement_timeout: 7200000
            search_path: '"$user",public'
      AuroraDBCluster:
        Type: AWS::RDS::DBCluster
        DeletionPolicy: Snapshot
        UpdateReplacePolicy: Snapshot
        Properties:
          Engine: aurora-postgresql
          EngineVersion: !Ref DBEngineVersion
          DatabaseName: !Ref DBName
          Port: 5432
          MasterUsername: !Ref DBUser
          MasterUserPassword: !Ref DBPassword
          DBSubnetGroupName: !Ref DBSubnetGroup
          VpcSecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
          BackupRetentionPeriod: 7
          DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
          # SnapshotIdentifier: !If [IsUseDBSnapshot, !Ref DBSnapshotName, !Ref "AWS::NoValue"]
          StorageEncrypted:  false
          EnableIAMDatabaseAuthentication: true
      AuroraDBFirstInstance:
        Type: AWS::RDS::DBInstance
        Properties:
          CopyTagsToSnapshot: true
          DBInstanceClass:
            Ref: DBInstanceClass
          DBClusterIdentifier: !Ref AuroraDBCluster
          Engine: aurora-postgresql
          EngineVersion: !Ref DBEngineVersion
          DBParameterGroupName:
            Ref: DBParamGroup
          MonitoringInterval: 0
          MonitoringRoleArn: !Ref "AWS::NoValue"
          AutoMinorVersionUpgrade: 'true'
          DBSubnetGroupName: !Ref DBSubnetGroup
          PubliclyAccessible: true
          EnablePerformanceInsights: false

    Outputs:
      ClusterEndpoint:
        Description: 'Aurora Cluster/Writer Endpoint'
        Value: !GetAtt 'AuroraDBCluster.Endpoint.Address'
      Port:
        Description: 'Aurora Endpoint Port'
        Value: !GetAtt 'AuroraDBCluster.Endpoint.Port'
      DBUsername:
        Description: 'Database master username'
        Value: !Ref DBUser
      DBName:
        Description: 'Database Name'
        Value: !Ref DBName
      DBPassword:
        Description: 'Database Password'
        Value: !Ref DBPassword
{{end}}

---
apiVersion: v1
kind: Namespace
metadata:
  name: prod
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prod:mynetwork:etcd-operator
rules:
- apiGroups:
  - etcd.database.coreos.com
  resources:
  - etcdclusters
  - etcdbackups
  - etcdrestores
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prod:mynetwork:etcd-operator
  namespace: prod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prod:mynetwork:etcd-operator
subjects:
- kind: ServiceAccount
  name: default
  namespace: prod
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: etcd-operator
  namespace: prod
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: etcd-operator
    spec:
      containers:
      - command:
        - etcd-operator
        env:
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: quay.io/coreos/etcd-operator:v0.9.4
        name: etcd-operator
---
apiVersion: etcd.database.coreos.com/v1beta2
kind: EtcdCluster
metadata:
  name: etcd
  namespace: prod
spec:
  size: 1
  version: 3.2.13
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-monitoring
  name: grafana
  namespace: prod
spec:
  ports:
  - name: grafana
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: mynetwork-monitoring
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-monitoring
  name: influxdb
  namespace: prod
spec:
  ports:
  - name: influxdb
    port: 8086
    protocol: TCP
    targetPort: 8086
  selector:
    app: mynetwork-monitoring
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: mynetwork-monitoring
  name: mynetwork-monitoring
  namespace: prod
spec:
  selector:
    matchLabels:
      app: mynetwork-monitoring
  serviceName: mynetwork-monitoring
  template:
    metadata:
      labels:
        app: mynetwork-monitoring
    spec:
      containers:
      - image: dev.catenasys.com:8083/blockchaintp/sawtooth-stats-influxdb:BTP2.0.0-21-gc2a1f0f-1.1.5
        name: influxdb
        ports:
        - containerPort: 8086
          name: influxdb
        resources:
          limits:
            cpu: 100m
          requests:
            cpu: 50m
      - image: dev.catenasys.com:8083/blockchaintp/sawtooth-stats-grafana:test1
        name: grafana
        ports:
        - containerPort: 3000
          name: grafana
        resources:
          limits:
            cpu: 100m
          requests:
            cpu: 50m
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mynetwork-sa
  namespace: prod
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mynetwork:role
  namespace: prod
rules:
- apiGroups:
  - ""
  - apps/v1
  resources:
  - services
  - statefulsets.apps
  - endpoints
  - nodes
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prod:mynetwork:clusterrole
rules:
- apiGroups:
  - ""
  - apps/v1
  resources:
  - statefulsets.apps
  - nodes
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: prod:mynetwork
  namespace: prod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mynetwork:role
subjects:
- kind: ServiceAccount
  name: mynetwork-sa
  namespace: prod
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prod:mynetwork
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prod:mynetwork:clusterrole
subjects:
- kind: ServiceAccount
  name: mynetwork-sa
  namespace: prod
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-validator
  name: mynetwork-rest-api
  namespace: prod
spec:
  ports:
  - name: rest-api
    port: 8008
    protocol: TCP
    targetPort: 8008
  selector:
    app: mynetwork-validator
  sessionAffinity: ClientIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-validator
  name: mynetwork-validator
  namespace: prod
spec:
  clusterIP: None
  ports:
  - name: sawnet
    port: 8800
    protocol: TCP
    targetPort: 8800
  selector:
    app: mynetwork-validator
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: mynetwork-validator
  namespace: prod
spec:
  selector:
    matchLabels:
      app: mynetwork-validator
  template:
    metadata:
      labels:
        app: mynetwork-validator
    spec:
      containers:
      - args:
        - pbft-engine -v -C tcp://${POD_IP}:5050
        command:
        - bash
        - -xc
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-pbft-engine:BTP2.0.0-21-gc2a1f0f-0.1.3
        name: pbft-engine
      - args:
        - settings-tp -v --connect tcp://${POD_IP}:4004
        command:
        - bash
        - -xc
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-settings-tp:BTP2.0.0-21-gc2a1f0f-1.1.5
        name: settings-tp
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      - args:
        - intkey-tp-go -v --connect tcp://${POD_IP}:4004
        command:
        - bash
        - -xc
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-intkey-tp-go:BTP2.0.0-21-gc2a1f0f-1.1.5
        name: intkey-tp
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      - args:
        - sawtooth-rest-api -v --bind 0.0.0.0:8080 --connect tcp://${POD_IP}:4004
        command:
        - bash
        - -xc
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-rest-api:BTP2.0.0-21-gc2a1f0f-1.1.5
        name: rest-api
        ports:
        - containerPort: 8080
          name: sawrest
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      - args:
        - sawtooth keygen && /usr/local/bin/heartbeat_loop.sh ${POD_NAME}
        command:
        - bash
        - -xc
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: dev.catenasys.com:8083/scealiontach/sawtooth-shell:test14
        name: monitor
        resources:
          limits:
            cpu: 100m
          requests:
            cpu: 100m
        volumeMounts:
        - mountPath: /etc/sawtooth
          name: sawtooth-etc
      - args:
        - "source /usr/local/bin/validator_env.sh prod mynetwork\nsawtooth-validator
          -v --scheduler serial \\\n  --endpoint tcp://${POD_IP}:8800 \\\n  --bind
          component:tcp://eth0:4004 \\\n  --bind consensus:tcp://eth0:5050 \\\n  --bind
          network:tcp://eth0:8800 \\\n  --peering dynamic \\\n   \\\n  ${SEEDS} \n"
        command:
        - bash
        - -xc
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: dev.catenasys.com:8083/scealiontach/sawtooth-validator:test17
        name: validator
        ports:
        - containerPort: 4004
          name: sawcomp
        - containerPort: 8800
          hostPort: 8800
          name: sawnet
        - containerPort: 5050
          name: consensus
        volumeMounts:
        - mountPath: /etc/sawtooth
          name: sawtooth-etc
        - mountPath: /var/lib/sawtooth
          name: sawtooth-data
      imagePullSecrets:
      - name: regcred
      initContainers:
      - args:
        - "mkdir -p /etc/sawtooth/data\nmkdir -p /etc/sawtooth/genesis\nmkdir -p /etc/sawtooth/keys\nif
          [ ! -r /etc/sawtooth/keys/validator.priv ]; then\n  sawadm keygen --force\nfi
          \nETCD_URL=http://etcd.prod:2379\netcdctl --endpoint $ETCD_URL ls \nEXIT=$?\nwhile
          [ $EXIT -ne 0 ]; do\n  sleep 5\n  etcdctl --endpoint $ETCD_URL ls 2>/dev/null\n
          \ EXIT=$?\ndone\netcdctl --endpoint $ETCD_URL set validator/$NODE_NAME/pubKey
          $(cat /etc/sawtooth/keys/validator.pub)\n# echo 'opentsdb_url = \"http://influxdb.prod:8086\"'>/etc/sawtooth/validator.toml\n#
          echo 'opentsdb_db = \"metrics\"'>>/etc/sawtooth/validator.toml\n# echo 'opentsdb_username
          \ = \"lrdata\"'>>/etc/sawtooth/validator.toml\n# echo 'opentsdb_password
          \ = \"lrdata\"'>>/etc/sawtooth/validator.toml\n"
        command:
        - bash
        - -xc
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: dev.catenasys.com:8083/scealiontach/sawtooth-validator:test17
        name: setup
        volumeMounts:
        - mountPath: /etc/sawtooth
          name: sawtooth-etc
        - mountPath: /var/lib/sawtooth
          name: sawtooth-data
      - args:
        - |
          env

          bash /usr/local/bin/pbft_genesis_config.sh ${POD_NAMESPACE}

          ETCD_URL=http://etcd.prod:2379

          if [ ! -r /etc/sawtooth/initialized ]; then
            genesis_pod=$( for n in $( kubectl --namespace ${POD_NAMESPACE} get pod \
                          -l app=mynetwork-validator -o jsonpath='{ $.items[*].metadata.name }'); \
                          do echo $n; done|sort |head -1 )
            if [ "${POD_NAME}" = "${genesis_pod}" ]; then
              sawset genesis -k /etc/sawtooth/keys/validator.priv -o /etc/sawtooth/genesis/000-genesis.batch ;
              cd /etc/sawtooth/genesis
              sawadm genesis `ls |sort`
              cd -
            else
              sleep 120
            fi
            touch /etc/sawtooth/initialized;
          fi
        command:
        - bash
        - -xc
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: dev.catenasys.com:8083/scealiontach/sawtooth-validator:test17
        name: genesis
        volumeMounts:
        - mountPath: /etc/sawtooth
          name: sawtooth-etc
        - mountPath: /var/lib/sawtooth
          name: sawtooth-data
      serviceAccountName: mynetwork-sa
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      volumes:
      - emptyDir: {}
        name: sawtooth-etc
      - emptyDir: {}
        name: sawtooth-data


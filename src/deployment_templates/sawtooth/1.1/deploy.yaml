---
apiVersion: v1
kind: Namespace
metadata:
  name: prod
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prod.mynetwork.etcd-operator
rules:
- apiGroups:
  - etcd.database.coreos.com
  resources:
  - etcdclusters
  - etcdbackups
  - etcdrestores
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: etcd-operator
  namespace: prod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prod.mynetwork.etcd-operator
subjects:
- kind: ServiceAccount
  name: default
  namespace: prod
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: etcd-operator
  namespace: prod
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: etcd-operator
    spec:
      containers:
      - command:
        - etcd-operator
        env:
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: quay.io/coreos/etcd-operator:v0.9.4
        name: etcd-operator
---
apiVersion: etcd.database.coreos.com/v1beta2
kind: EtcdCluster
metadata:
  name: mynetwork-etcd-cluster
  namespace: prod
spec:
  size: 3
  version: 3.2.13
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-monitoring
    dns: route53
  name: grafana
  namespace: prod
spec:
  ports:
  - name: grafana
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: mynetwork-monitoring
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-monitoring
  name: influxdb
  namespace: prod
spec:
  ports:
  - name: influxdb
    port: 8086
    protocol: TCP
    targetPort: 8086
  selector:
    app: mynetwork-monitoring
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: mynetwork-monitoring
  name: mynetwork-monitoring
  namespace: prod
spec:
  selector:
    matchLabels:
      app: mynetwork-monitoring
  serviceName: mynetwork-monitoring
  template:
    metadata:
      labels:
        app: mynetwork-monitoring
    spec:
      containers:
      - env:
        - name: INFLUX_DB
          value: metrics
        - name: INFLUX_HTTP_AUTH_ENABLED
          value: "true"
        - name: INFLUXDB_ADMIN_USER
          value: admin
        - name: INFLUXDB_ADMIN_PASSWORD
          value: admin
        - name: INFLUXDB_USER
          value: lrdata
        - name: INFLUXDB_USER_PASSWORD
          value: lrdata
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-stats-influxdb:BTP2.0.0
        name: influxdb
        ports:
        - containerPort: 8086
          name: influxdb
        resources:
          limits:
            cpu: 100m
          requests:
            cpu: 50m
      - image: dev.catenasys.com:8083/blockchaintp/sawtooth-stats-grafana:BTP2.0.0
        name: grafana
        ports:
        - containerPort: 3000
          name: grafana
        resources:
          limits:
            cpu: 100m
          requests:
            cpu: 50m
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mynetwork-sa
  namespace: prod
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mynetwork-role
  namespace: prod
rules:
- apiGroups:
  - ""
  - apps/v1
  resources:
  - services
  - statefulsets.apps
  - endpoints
  - nodes
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mynetwork-clusterrole
  namespace: prod
rules:
- apiGroups:
  - ""
  - apps/v1
  resources:
  - statefulsets.apps
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: mynetwork-rb
  namespace: prod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mynetwork-role
subjects:
- kind: ServiceAccount
  name: mynetwork-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: mynetwork-crb
  namespace: prod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mynetwork-clusterrole
subjects:
- kind: ServiceAccount
  name: mynetwork-sa
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-validator
  name: mynetwork-rest-api
  namespace: prod
spec:
  ports:
  - name: rest-api
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: seth-rpc
    port: 3030
    protocol: TCP
    targetPort: 30030
  selector:
    app: mynetwork-validator
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-validator
  name: mynetwork-nodeport
  namespace: prod
spec:
  ports:
  - name: rest-api
    nodePort: 30080
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: seth-rpc
    nodePort: 30030
    port: 30030
    protocol: TCP
    targetPort: 3030
  - name: sawnet
    nodePort: 30800
    port: 30800
    protocol: TCP
    targetPort: 30800
  selector:
    app: mynetwork-validator
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-validator
  name: mynetwork-validator
  namespace: prod
spec:
  clusterIP: None
  ports:
  - name: sawnet
    port: 30800
    protocol: TCP
    targetPort: 30800
  selector:
    app: mynetwork-validator
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mynetwork-xo-demo
  name: mynetwork-xo-demo
  namespace: prod
spec:
  ports:
  - name: xo-demo
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: mynetwork-validator
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: mynetwork-validator
  namespace: prod
spec:
  selector:
    matchLabels:
      app: mynetwork-validator
  template:
    metadata:
      labels:
        app: mynetwork-validator
    spec:
      containers:
      - args:
        - "for node in `kubectl --namespace ${POD_NAMESPACE} get pod -l app=mynetwork-validator
          -o jsonpath='{ $.items[*].spec.nodeName }'`; do\n  ip=`kubectl get nodes
          -o jsonpath='{ $.items[*].status.addresses[?(@.type==\"ExternalIP\")].address
          }' -l kubernetes.io/role=node -l kubernetes.io/hostname=${node}`\n  if [
          \"${NODE_NAME}\" != \"${node}\" ]; then\n    export SEEDS=\"-p tcp://$ip:30800
          $SEEDS\";\n  else\n    export MY_EXTERNAL_IP=$ip\n  fi\necho External IP
          Address is $MY_EXTERNAL_IP \ndone;\nsawtooth-validator -v --scheduler parallel
          \\\n--endpoint tcp://${MY_EXTERNAL_IP}:30800 \\\n  --bind component:tcp://127.0.0.1:4004
          \\\n  --bind consensus:tcp://127.0.0.1:5050 \\\n  --bind network:tcp://0.0.0.0:30800
          \\\n  -P static \\\n   \\\n  ${SEEDS} \\\n  --network-auth trust \\\n  --minimum-peer-connectivity
          5 \\\n  --maximum-peer-connectivity 64 ;\n"
        command:
        - bash
        - -xc
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-validator:BTP2.0.0
        livenessProbe:
          exec:
            command:
            - bash
            - -xc
            - "mkdir -p /var/run/liveness\ncat /var/log/sawtooth/validator-debug.log|
              \\\n  grep block_validator|grep \"Finished block validation\"| \\\n
              \ grep block_num| awk -F'block_num:' '{print $2}'| awk -F, '{print $1}'|
              tail -1 > /var/run/liveness.probe\ngrep -v \"Cannot create wait certificate
              because timer has timed out\" /var/log/sawtooth/validator-error.log|
              \\\ngrep -v \"claiming blocks too frequently.\" /var/log/sawtooth/validator-error.log|
              \\\n  grep -v \"Create new registration\" | \\\n  grep ERROR\nif [ $?
              -eq 0 ]; then \n  echo \"Found significant errors in the runtime log\"\n
              \ exit 1\nelse\n  LAST_PROBE=`cat /var/run/liveness/probe.last`\n  mkdir
              -p /var/run/liveness\n  cat /var/log/sawtooth/validator-debug.log| \\\n
              \   grep block_validator|grep \"Finished block validation\"| \\\n    grep
              block_num| awk -F'block_num:' '{print $2}'| awk -F, '{print $1}'| tail
              -1 > /var/run/liveness/probe.new\n  THIS_PROBE=`cat /var/run/liveness/probe.new`\n
              \ if [ -r /var/run/liveness/probe.count ]; then\n    FAIL_COUNT=`cat
              /var/run/liveness/probe.count`\n  else\n    FAIL_COUNT=0\n  fi\n  if
              [ \"$THIS_PROBE\" = \"$LAST_PROBE\" ]; then\n    FAIL_COUNT=$(( $FAIL_COUNT
              + 1 ))\n    echo \"Current probe status FAIL_COUNT=$FAIL_COUNT LAST_PROBE=$LAST_PROBE
              THIS_PROBE=$THIS_PROBE\"\n    if [ $FAIL_COUNT -ge 10 ]; then\n      echo
              \"Exceeded FAIL_COUNT threshold=10\"\n      exit 1\n    else\n      echo
              $FAIL_COUNT > /var/run/liveness/probe.count\n    fi\n  else\n    echo
              0 > /var/run/liveness/probe.count\n  fi\n  echo $THIS_PROBE > /var/run/liveness/probe.last\nfi\nexit
              0\n"
          initialDelaySeconds: 120
          periodSeconds: 60
        name: validator
        ports:
        - containerPort: 4004
          name: sawcomp
        - containerPort: 30800
          name: sawnet
        - containerPort: 5050
          name: consensus
        volumeMounts:
        - mountPath: /etc/sawtooth
          name: sawtooth-etc
        - mountPath: /var/lib/sawtooth
          name: sawtooth-data
      - args:
        - settings-tp -v --connect tcp://localhost:4004
        command:
        - bash
        - -xc
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-settings-tp:BTP2.0.0
        name: settings-tp
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      - args:
        - block-info-tp -v --connect tcp://localhost:4004
        command:
        - bash
        - -xc
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-block-info-tp:BTP2.0.0
        name: block-info-tp
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      - args:
        - intkey-tp-go -v --connect tcp://localhost:4004
        command:
        - bash
        - -xc
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-intkey-tp-go:BTP2.0.0
        name: intkey-tp
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      - args:
        - seth-tp -v --connect tcp://localhost:4004
        command:
        - bash
        - -xc
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-seth-tp:BTP2.0.0
        name: seth-tp
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      - args:
        - 'seth-rpc -v --bind 0.0.0.0:3030 --connect tcp://localhost:4004 '
        command:
        - bash
        - -xc
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-seth-rpc:BTP2.0.0
        name: seth-rpc
        ports:
        - containerPort: 3030
          name: seth-rpc
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      - args:
        - devmode-engine-rust -v -C tcp://localhost:5050
        command:
        - bash
        - -xc
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-devmode-engine-rust:BTP2.0.0
        name: devmode-engine
      - args:
        - 'sawtooth-rest-api -v --bind 0.0.0.0:8080 --connect tcp://localhost:4004
          --opentsdb-url http://influxdb:8086  --opentsdb-db metrics '
        command:
        - bash
        - -xc
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-rest-api:BTP2.0.0
        name: rest-api
        ports:
        - containerPort: 8080
          name: sawrest
        resources:
          limits:
            cpu: 250m
          requests:
            cpu: 50m
      imagePullSecrets:
      - name: regcred
      initContainers:
      - args:
        - |
          mkdir -p /etc/sawtooth/data
          mkdir -p /etc/sawtooth/genesis
          mkdir -p /etc/sawtooth/keys
          if [ ! -r /etc/sawtooth/keys/validator.priv ]; then
            sawadm keygen --force
          fi
          echo 'opentsdb_url = "http://influxdb:8086"'>/etc/sawtooth/validator.toml
          echo 'opentsdb_db = "metrics"'>>/etc/sawtooth/validator.toml
          echo 'opentsdb_username  = "lrdata"'>>/etc/sawtooth/validator.toml
          echo 'opentsdb_password  = "lrdata"'>>/etc/sawtooth/validator.toml
        command:
        - bash
        - -xc
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-shell:BTP2.0.0
        name: setup
        volumeMounts:
        - mountPath: /etc/sawtooth
          name: sawtooth-etc
        - mountPath: /var/lib/sawtooth
          name: sawtooth-data
      - args:
        - "if [ ! -r /etc/sawtooth/initialized ]; then\n  genesis_pod=$( for n in
          $( kubectl --namespace ${POD_NAMESPACE} get pod \\\n                -l app=mynetwork-validator
          -o jsonpath='{ $.items[*].metadata.name }'); \\\n                do echo
          $n; done|sort |head -1 )\n  if [ \"${POD_NAME}\" = \"${genesis_pod}\" ];
          then\n    sawset genesis -k /etc/sawtooth/keys/validator.priv -o /etc/sawtooth/genesis/genesis.batch
          ;\n\n    sawset proposal create -k /etc/sawtooth/keys/validator.priv \\\n
          \     sawtooth.consensus.algorithm.name=PoET \\\n      sawtooth.consensus.algorithm.version=0.1
          \\\n      sawtooth.poet.report_public_key_pem=\\\n      \\\\\\\"$$(cat /poet-shared/simulator_rk_pub.pem)\\\\\\\"
          \\\n      sawtooth.poet.valid_enclave_measurements=$$(cat /etc/sawtooth/poet-enclave-measurement)
          \\\n      sawtooth.poet.valid_enclave_basenames=$$(cat /etc/sawtooth/poet-enclave-basename)
          \\\n      -o /etc/sawtooth/genesis/100-config.batch; \n\n    sawadm genesis
          `ls /etc/sawtooth/genesis|sort`\n  else\n    sleep 60\n  fi\n  touch /etc/sawtooth/initialized;\nfi\n"
        command:
        - bash
        - -xc
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: dev.catenasys.com:8083/blockchaintp/sawtooth-shell:BTP2.0.0
        name: genesis
        volumeMounts:
        - mountPath: /etc/sawtooth
          name: sawtooth-etc
        - mountPath: /var/lib/sawtooth
          name: sawtooth-data
      serviceAccountName: mynetwork-sa
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      volumes:
      - emptyDir: {}
        name: sawtooth-etc
      - emptyDir: {}
        name: sawtooth-data


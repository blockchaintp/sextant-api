# kubetpl:syntax:go-template
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.deployment.name}}-sa
  namespace: {{.deployment.namespace}}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.deployment.name}}-role
  namespace: {{.deployment.namespace}}
rules:
  - apiGroups: ["","apps/v1"] # "" refers to the core API group
    resources: ["services", "statefulsets.apps","endpoints", "nodes", "pods"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{.deployment.name}}-clusterrole
  namespace: {{.deployment.namespace}}
rules:
  - apiGroups: ["","apps/v1"] # "" refers to the core API group
    resources: ["statefulsets.apps", "nodes",]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: {{.deployment.name}}-rb
  namespace: {{.deployment.namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{.deployment.name}}-role
subjects:
- kind: ServiceAccount
  name: {{.deployment.name}}-sa
  namespace: {{.deployment.namespace}}

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: {{.deployment.name}}-crb
  namespace: {{.deployment.namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{.deployment.name}}-clusterrole
subjects:
- kind: ServiceAccount
  name: {{.deployment.name}}-sa
  namespace: {{.deployment.namespace}}

---
{{$peering:= .sawtooth.dynamicPeering}}
apiVersion: v1
kind: Service
metadata:
  name: {{.deployment.name}}-rest-api
  namespace: {{.deployment.namespace}}
  labels:
    app: {{.deployment.name}}-validator
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    protocol: TCP 
    targetPort: 8080
    name: rest-api
  - port: 3030
    protocol: TCP 
    targetPort: 3030
    name: seth-rpc
  selector:
    app: {{.deployment.name}}-validator
---

apiVersion: v1
kind: Service
metadata:
  name: {{.deployment.name}}-nodeport
  namespace: {{.deployment.namespace}}
  labels:
    app: {{.deployment.name}}-validator
spec:
  type: NodePort
  ports:
  - nodePort: 30080
    port: 8080
    protocol: TCP 
    targetPort: 8080
    name: rest-api
  - nodePort: 30030
    port: 3030
    protocol: TCP 
    targetPort: 3030
    name: seth-rpc
  - nodePort: 30800
    port: 30800
    protocol: TCP 
    targetPort: 30800
    name: sawnet
  selector:
    app: {{.deployment.name}}-validator
---

apiVersion: v1
kind: Service
metadata:
  name: {{.deployment.name}}-validator
  namespace: {{.deployment.namespace}}
  labels:
    app: {{.deployment.name}}-validator
spec:
  ports:
  - port: 30800
    protocol: TCP 
    targetPort: 30800
    name: sawnet
  clusterIP: None
  selector:
    app: {{.deployment.name}}-validator
---

apiVersion: v1
kind: Service
metadata:
  name: {{.deployment.name}}-xo-demo
  namespace: {{.deployment.namespace}}
  labels:
    app: {{.deployment.name}}-xo-demo
spec:
  type: LoadBalancer
  ports:
  - port: 80
    protocol: TCP 
    targetPort: 80
    name: xo-demo
  selector:
    app: {{.deployment.name}}-validator
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.deployment.name}}-validator
  namespace: {{.deployment.namespace}}
spec:
  selector:
    matchLabels:
      app: {{.deployment.name}}-validator
  serviceName: "{{.deployment.name}}-validator"
  podManagementPolicy: Parallel
  replicas: {{.sawtooth.replicas}}
  template:
    metadata:
      labels:
        app: {{.deployment.name}}-validator
    spec:
      serviceAccountName: {{.deployment.name}}-sa
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: sawtooth-validator
        image: {{.sources.imageRepository}}/sawtooth-validator:{{.sources.version}}
        command: ["bash", "-c" ]
        args:
          - |
            apt update; apt install curl -y;
            MY_IP=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod a+x kubectl; mv kubectl /usr/local/bin
            echo External IP Address is $MY_IP 
            for node in `kubectl get pod -l app={{.deployment.name}}-validator -o jsonpath='{ $.items[*].spec.nodeName }'`; do
              ip=`kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="ExternalIP")].address }' -l kubernetes.io/role=node -l kubernetes.io/hostname=${node}`
              if [ "${MY_IP}" != "${ip}" ]; then
                export SEEDS="{{if ($peering) }}-s{{else}}-p{{end}} tcp://$ip:30800 $SEEDS";
              fi
            done;
            sawtooth-validator -v --scheduler {{.sawtooth.scheduler}} \
            --endpoint tcp://${MY_IP}:30800 \
              --bind component:tcp://0.0.0.0:4004 \
              --bind network:tcp://0.0.0.0:30800 \
              -P {{if ($peering)}}dynamic{{else}}static{{end}} \
              {{ range .sawtooth.externalSeeds }}{{if ($peering) }}-s{{else}}-p{{end}} tcp://{{.}} {{end}} \
              ${SEEDS} \
              --network-auth trust \
              --minimum-peer-connectivity 5 \
              --maximum-peer-connectivity 64 \
              --opentsdb-url http://influxdb:8086 \
              --opentsdb-db metrics ;
        volumeMounts:
        - mountPath: "/etc/sawtooth"
          name: sawtooth
        livenessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                mkdir -p /var/run/liveness
                cat /var/log/sawtooth/validator-debug.log| \
                  grep block_validator|grep "Finished block validation"| \
                  grep block_num| awk -F'block_num:' '{print $2}'| awk -F, '{print $1}'| tail -1 > /var/run/liveness.probe
                grep -v "Cannot create wait certificate because timer has timed out" /var/log/sawtooth/validator-error.log| \
                grep -v "claiming blocks too frequently." /var/log/sawtooth/validator-error.log| \
                  grep -v "Create new registration" | \
                  grep ERROR
                if [ $? -eq 0 ]; then 
                  echo "Found significant errors in the runtime log"
                  exit 1
                else
                  LAST_PROBE=`cat /var/run/liveness/probe.last`
                  mkdir -p /var/run/liveness
                  cat /var/log/sawtooth/validator-debug.log| \
                    grep block_validator|grep "Finished block validation"| \
                    grep block_num| awk -F'block_num:' '{print $2}'| awk -F, '{print $1}'| tail -1 > /var/run/liveness/probe.new
                  THIS_PROBE=`cat /var/run/liveness/probe.new`
                  if [ -r /var/run/liveness/probe.count ]; then
                    FAIL_COUNT=`cat /var/run/liveness/probe.count`
                  else
                    FAIL_COUNT=0
                  fi
                  if [ "$THIS_PROBE" = "$LAST_PROBE" ]; then
                    FAIL_COUNT=$(( $FAIL_COUNT + 1 ))
                    echo "Current probe status FAIL_COUNT=$FAIL_COUNT LAST_PROBE=$LAST_PROBE THIS_PROBE=$THIS_PROBE"
                    if [ $FAIL_COUNT -ge 10 ]; then
                      echo "Exceeded FAIL_COUNT threshold=10"
                      exit 1
                    else
                      echo $FAIL_COUNT > /var/run/liveness/probe.count
                    fi
                  else
                    echo 0 > /var/run/liveness/probe.count
                  fi
                  echo $THIS_PROBE > /var/run/liveness/probe.last
                fi
                exit 0
          initialDelaySeconds: 120
          periodSeconds: 60
        env:
          - name: ENDPOINT_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        ports:
          - containerPort: 4004
            name: sawcomp
          - containerPort: 30800
            name: sawnet
          - containerPort: 5050
            name: consensus
      - name: settings-tp
        image: {{.sources.imageRepository}}/sawtooth-settings-tp:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "settings-tp -v --connect tcp://localhost:4004"
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      - name: identity-tp
        image: {{.sources.imageRepository}}/sawtooth-identity-tp:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "identity-tp -v --connect tcp://localhost:4004"
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      - name: block-info-tp
        image: {{.sources.imageRepository}}/sawtooth-block-info-tp:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "block-info-tp -v --connect tcp://localhost:4004"
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      - name: intkey-tp
        image: {{.sources.imageRepository}}/sawtooth-intkey-tp-go:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "intkey-tp-go -v --connect tcp://localhost:4004"
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      {{ if .sawtooth.poet.enabled }}
      - name: poet-validator-registry-tp
        image: {{.sources.imageRepository}}/sawtooth-poet-validator-registry-tp:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "poet-validator-registry-tp -v --connect tcp://localhost:4004"
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      {{ end }}
      {{ if .sawtooth.seth.enabled }}
      - name: seth-tp
        image: {{.sources.imageRepository}}/sawtooth-seth-tp:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "seth-tp -v --connect tcp://localhost:4004 --listen tcp://0.0.0.0:4005"
        ports:
          - containerPort: 4005
            name: seth
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      - name: seth-rpc
        image: {{.sources.imageRepository}}/sawtooth-seth-rpc:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "seth-rpc -vv --bind 0.0.0.0:3030 --connect tcp://localhost:4004 --process tcp://0.0.0.0:4005"
        ports:
          - containerPort: 3030
            name: seth-rpc
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      {{ end }}
      {{ if .sawtooth.smallbank.enabled }}
      - name: smallbank-tp
        image: {{.sources.imageRepository}}/sawtooth-smallbank-tp-go:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "smallbank-tp-go -v --connect tcp://localhost:4004"
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      {{ end }}
      {{ if .sawtooth.rbac.enabled }} 
      - name: rbac-tp
        image: {{.sources.imageRepository}}/rbac-tp-production:{{.sources.rbacVersion}}
        command: [ "bash", "-c"]
        args: 
          - "bin/rbac-tp -v tcp://localhost:4004"
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      {{ end }}
      {{ if .sawtooth.xo.enabled }}
      - name: xo-tp
        image: {{.sources.imageRepository}}/sawtooth-xo-tp-go:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "xo-tp-go -v --connect tcp://localhost:4004"
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      - name: xo-demo
        image: {{.sources.imageRepository}}/xo-demo:{{.sources.xoDemoVersion}}
        ports:
          - containerPort: 80
            name: xo-demo
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      {{ end }}
      {{range .sawtooth.customTPs}}
      - name: {{.name}}
        image: {{.image}}
        {{if .command}}command: [ {{ range .command }}"{{.}}",{{end}} ]{{end}}
        {{if .args}}args: [ {{ range .args}}"{{.}}", {{end}} ]{{end}}
      {{end}}
      {{ if .sawtooth.simple.enabled }}
      - name: simple-tp-python
        image: {{.sources.imageRepository}}/simple-tp-python:{{.sources.simpleVersion}}
        command: [ "bash", "-c"]
        args: 
          - |  
            ( set -x ; apt update;
            apt install git -y
            cd /; 
            git clone https://github.com/catenasys/caliper; 
            cd caliper; 
            git fetch --all;
            git checkout sawtooth-testing ; 
            cd /; 
            mv caliper project; 
            /project/caliper/src/contract/sawtooth/simple/simple_python/simple-tp-python -vv -C tcp://localhost:4004 )
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      {{ end }}
      - name: rest-api
        image: {{.sources.imageRepository}}/sawtooth-rest-api:{{.sources.version}}
        command: [ "bash", "-c"]
        args: 
          - "sawtooth-rest-api -v --bind 0.0.0.0:8080 --connect tcp://localhost:4004 --opentsdb-url http://influxdb:8086  --opentsdb-db metrics "
        ports:
          - containerPort: 8080
            name: sawrest
        resources:
          limits:
            cpu: "250m"
          requests:
            cpu: "50m"
      - name: utility-shell
        image: blockchaintp/sawtooth-shell:master
        command:
          - bash
          - -c
        args:
          - |
            set -x
            sawtooth keygen; 
            touch iam.healthy
            intkey set --url http://localhost:8080 ${POD_NAME} 0 ; 
            THEN=0
            while /bin/true; do 
              intkey inc --url http://localhost:8080 ${POD_NAME} 1;
              sleep 2;
              NOW=`intkey show --url http://localhost:8080 ${POD_NAME}`;
              if [ "$NOW" = "$THEN" ]; then
                rm -f iam.healthy
              else
                touch iam.healthy
              fi
              THEN=$NOW
            done
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          limits:
            cpu: "100m"
          requests:
            cpu: "100m"
      initContainers:
      - name: install
        image: {{.sources.imageRepository}}/sawtooth-validator:{{.sources.version}}
        command: [ "bash", "-xc" ]
        args: 
          - |
            set -x
            apt-get update -y
            apt-get install curl -y
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl
            chmod a+x kubectl 
            mv kubectl /usr/local/bin/
            if [ ! -r /etc/sawtooth/initialized ]; then
              mkdir -p /etc/sawtooth/keys;
              mkdir -p /etc/sawtooth/data;
              rm -rf /var/lib/sawtooth;
              ln -s /etc/sawtooth/data /var/lib/sawtooth
              sawadm keygen --force;
              sawtooth keygen --force ;
              {{ if .sawtooth.genesis.enabled }}
              if [ "${POD_NAME}" = "{{.deployment.name}}-validator-0" ]; then
                mkdir -p /etc/sawtooth/genesis;
                curl https://raw.githubusercontent.com/hyperledger/sawtooth-core/5094a9a1a7d086c14704e7055cfad9de77d1e6aa/consensus/poet/simulator/packaging/simulator_rk_pub.pem > /etc/sawtooth/keys/simulator_rk_pub.pem
                sawset genesis -k /etc/sawtooth/keys/validator.priv -o /etc/sawtooth/genesis/genesis.batch ;
                sawset proposal create -k /etc/sawtooth/keys/validator.priv {{ if .sawtooth.poet.enabled }} \
                  sawtooth.consensus.algorithm=poet \
                  sawtooth.poet.report_public_key_pem="$(cat /etc/sawtooth/keys/simulator_rk_pub.pem)" \
                  sawtooth.poet.valid_enclave_measurements=$(poet enclave --enclave-module {{.sawtooth.poet.enclaveModule}} measurement) \
                  sawtooth.poet.valid_enclave_basenames=$(poet enclave --enclave-module {{.sawtooth.poet.enclaveModule}} basename) \
                  sawtooth.validator.batch_injectors=block_info \
                  -o /etc/sawtooth/genesis/config.batch; {{ else }} \
                  sawtooth.validator.batch_injectors=block_info -o /etc/sawtooth/genesis/config.batch; {{ end }}
                {{ if .sawtooth.poet.enabled }}
                poet registration create -k /etc/sawtooth/keys/validator.priv \
                  --enclave-module simulator \
                  -o /etc/sawtooth/genesis/poet.batch
                sawset proposal create -k /etc/sawtooth/keys/validator.priv \
                  sawtooth.poet.target_wait_time={{.sawtooth.poet.targetWaitTime}} \
                  sawtooth.poet.initial_wait_time={{.sawtooth.poet.initialWaitTime}} \
                  sawtooth.publisher.max_batches_per_block={{.sawtooth.poet.maxBatchesPerBlock}} \
                  -o /etc/sawtooth/genesis/poet-settings.batch
                {{ end }}
                
                sawadm genesis /etc/sawtooth/genesis/genesis.batch \
                  /etc/sawtooth/genesis/config.batch {{ if .sawtooth.poet.enabled }} \
                  /etc/sawtooth/genesis/poet.batch \
                  /etc/sawtooth/genesis/poet-settings.batch
                  {{ end }}
              else
                sleep 60
              fi
              {{ end }}
              echo 'data_dir = "/etc/sawtooth/data"' > /etc/sawtooth/path.toml
              touch /etc/sawtooth/initialized;
            fi
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        - mountPath: "/etc/sawtooth"
          name: sawtooth
  volumeClaimTemplates:
  - metadata:
      name: sawtooth
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 10Gi
---

